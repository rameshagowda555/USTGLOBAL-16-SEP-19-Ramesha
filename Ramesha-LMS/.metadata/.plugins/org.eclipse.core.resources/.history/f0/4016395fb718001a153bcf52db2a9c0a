package com.ustglobal.librarymanagementsystem.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ustglobal.librarymanagementsystem.dto.BookBean;
import com.ustglobal.librarymanagementsystem.dto.UserBean;
import com.ustglobal.librarymanagementsystem.dto.UserResponse;
import com.ustglobal.librarymanagementsystem.service.LibrarianService;

@RestController
public class LibrarianController {
	@Autowired
	private LibrarianService service;
	
	@GetMapping(path="/user-login/{librarianId}/{librarianPassword}",produces = MediaType.APPLICATION_JSON_VALUE)
	public UserResponse librarianLogin(@PathVariable("librarianId")int librarianId,@PathVariable("librarianPassword")String librarianPassword) {
		UserResponse response = new UserResponse();
		UserBean bean = service.librarianLogin(librarianId, librarianPassword);
		if(bean!= null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Librarian Login Successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Librarian Not Able To Login");
		}
		return response;
	}
	
	@PostMapping(path="/add-book",consumes = MediaType.APPLICATION_JSON_VALUE,produces = MediaType.APPLICATION_JSON_VALUE)
	public UserResponse addStudent(@RequestBody BookBean bean) {
		UserResponse response = new UserResponse();
		if(service.addBook(bean)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Book is added to the Library");
		}else {	
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Book is not added to the Library ");
		}
		return response;
	}
	@GetMapping(path="/search-book/{bookName}",produces = MediaType.APPLICATION_JSON_VALUE)
	public UserResponse searchBookByName(@PathVariable("bookName")String bookName) {
		UserResponse response = new UserResponse();
		BookBean bean = service.searchBook(bookName);
		
		if(bean!=null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Book is Available in the Library");
			response.setBookBean(Arrays.asList(bean));//in the list it store only one result
			
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Book is Not Available in the Library ");	
		}
		return response;
	}
	
	@GetMapping(path="/search-all-books",produces = MediaType.APPLICATION_JSON_VALUE)
	public LibrarianResponse searchAllBook(){
		LibrarianResponse response = new LibrarianResponse();
		List<BookBean> bean = service.searchAllBooks();
		if(!bean.isEmpty()) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Books is available in library");
			response.setBookBean(bean);
			
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Book is Not available in library");	
		}
		
		return response;
	}
	
	@DeleteMapping(path = "/remove-book/{bookId}",produces = MediaType.APPLICATION_JSON_VALUE)
	public LibrarianResponse removeBook(@PathVariable("bookId")int bookId) {
		LibrarianResponse response = new LibrarianResponse();
		if(service.removeBook(bookId)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Book Removed from the DataBase");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Book Not Removed from the DataBase");
		}
		return response;
	}
	
	@GetMapping(path="/accept-request/{registrationId}",produces = MediaType.APPLICATION_JSON_VALUE)
	public LibrarianResponse acceptRequest(@PathVariable("registrationId")int registrationId) {
		LibrarianResponse response = new LibrarianResponse();
		if(service.acceptRequest(registrationId)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Requesting for Book is Accepted");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Book request is not accepted");
		}
		return response;
	}
	
	@DeleteMapping(path = "/issue-book/{studentId}/{bookId}",produces = MediaType.APPLICATION_JSON_VALUE)
	public LibrarianResponse issueBook(@PathVariable("studentId")int studentId,@PathVariable("bookId")int bookId) {
		LibrarianResponse response = new LibrarianResponse();
		if(service.issueBook(studentId, bookId)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Book Removed from the DataBase");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Book Not Removed from the DataBase");
		}
		return response;
	}
}
